////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: P.20131013
//  \   \         Application: netgen
//  /   /         Filename: FIR_SCALE.v
// /___/   /\     Timestamp: Wed Sep 27 10:36:42 2017
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog H:/Firmware/git_repo/font5-atf-legacy/ipcore_dir/tmp/_cg/FIR_SCALE.ngc H:/Firmware/git_repo/font5-atf-legacy/ipcore_dir/tmp/_cg/FIR_SCALE.v 
// Device	: 5vlx50tff1136-3
// Input file	: H:/Firmware/git_repo/font5-atf-legacy/ipcore_dir/tmp/_cg/FIR_SCALE.ngc
// Output file	: H:/Firmware/git_repo/font5-atf-legacy/ipcore_dir/tmp/_cg/FIR_SCALE.v
// # of Modules	: 1
// Design Name	: FIR_SCALE
// Xilinx        : C:\Xilinx\14.7\ISE_DS\ISE\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module FIR_SCALE (
  clk, p, a, b
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  output [48 : 0] p;
  input [41 : 0] a;
  input [6 : 0] b;
  
  // synthesis translate_off
  
  wire \blk00000001/sig000000b7 ;
  wire \blk00000001/sig000000b6 ;
  wire \blk00000001/sig000000b5 ;
  wire \blk00000001/sig000000b4 ;
  wire \blk00000001/sig000000b3 ;
  wire \blk00000001/sig000000b2 ;
  wire \blk00000001/sig000000b1 ;
  wire \blk00000001/sig000000b0 ;
  wire \blk00000001/sig000000af ;
  wire \blk00000001/sig000000ae ;
  wire \blk00000001/sig000000ad ;
  wire \blk00000001/sig000000ac ;
  wire \blk00000001/sig000000ab ;
  wire \blk00000001/sig000000aa ;
  wire \blk00000001/sig000000a9 ;
  wire \blk00000001/sig000000a8 ;
  wire \blk00000001/sig000000a7 ;
  wire \blk00000001/sig000000a6 ;
  wire \blk00000001/sig000000a5 ;
  wire \blk00000001/sig000000a4 ;
  wire \blk00000001/sig000000a3 ;
  wire \blk00000001/sig000000a2 ;
  wire \blk00000001/sig000000a1 ;
  wire \blk00000001/sig000000a0 ;
  wire \blk00000001/sig0000009f ;
  wire \blk00000001/sig0000009e ;
  wire \blk00000001/sig0000009d ;
  wire \blk00000001/sig0000009c ;
  wire \blk00000001/sig0000009b ;
  wire \blk00000001/sig0000009a ;
  wire \blk00000001/sig00000099 ;
  wire \blk00000001/sig00000098 ;
  wire \blk00000001/sig00000097 ;
  wire \blk00000001/sig00000096 ;
  wire \blk00000001/sig00000095 ;
  wire \blk00000001/sig00000094 ;
  wire \blk00000001/sig00000093 ;
  wire \blk00000001/sig00000092 ;
  wire \blk00000001/sig00000091 ;
  wire \blk00000001/sig00000090 ;
  wire \blk00000001/sig0000008f ;
  wire \blk00000001/sig0000008e ;
  wire \blk00000001/sig0000008d ;
  wire \blk00000001/sig0000008c ;
  wire \blk00000001/sig0000008b ;
  wire \blk00000001/sig0000008a ;
  wire \blk00000001/sig00000089 ;
  wire \blk00000001/sig00000088 ;
  wire \blk00000001/sig00000087 ;
  wire \blk00000001/sig00000086 ;
  wire \blk00000001/sig00000085 ;
  wire \blk00000001/sig00000084 ;
  wire \blk00000001/sig00000083 ;
  wire \blk00000001/sig00000082 ;
  wire \blk00000001/sig00000081 ;
  wire \blk00000001/sig00000080 ;
  wire \blk00000001/sig0000007f ;
  wire \blk00000001/sig0000007e ;
  wire \blk00000001/sig0000007d ;
  wire \blk00000001/sig0000007c ;
  wire \blk00000001/sig0000007b ;
  wire \blk00000001/sig0000007a ;
  wire \blk00000001/sig00000079 ;
  wire \blk00000001/sig00000078 ;
  wire \blk00000001/sig00000077 ;
  wire \blk00000001/sig00000076 ;
  wire \blk00000001/sig00000075 ;
  wire \blk00000001/sig00000074 ;
  wire \blk00000001/sig00000073 ;
  wire \blk00000001/sig00000072 ;
  wire \blk00000001/sig00000071 ;
  wire \blk00000001/sig00000070 ;
  wire \blk00000001/sig0000006f ;
  wire \blk00000001/sig0000006e ;
  wire \blk00000001/sig0000006d ;
  wire \blk00000001/sig0000006c ;
  wire \blk00000001/sig0000006b ;
  wire \blk00000001/sig0000006a ;
  wire \blk00000001/sig00000069 ;
  wire \blk00000001/sig00000068 ;
  wire \blk00000001/sig00000067 ;
  wire \blk00000001/sig00000066 ;
  wire \blk00000001/sig00000065 ;
  wire \blk00000001/sig00000064 ;
  wire \blk00000001/sig00000063 ;
  wire \blk00000001/sig00000062 ;
  wire \blk00000001/sig00000061 ;
  wire \blk00000001/sig00000060 ;
  wire \blk00000001/sig0000005f ;
  wire \blk00000001/sig0000005e ;
  wire \blk00000001/sig0000005d ;
  wire \blk00000001/sig0000005c ;
  wire \blk00000001/sig0000005b ;
  wire \blk00000001/sig0000005a ;
  wire \blk00000001/sig00000059 ;
  wire \blk00000001/sig00000058 ;
  wire \blk00000001/sig00000057 ;
  wire \blk00000001/sig00000056 ;
  wire \blk00000001/sig00000055 ;
  wire \blk00000001/sig00000054 ;
  wire \blk00000001/sig00000053 ;
  wire \blk00000001/sig00000052 ;
  wire \blk00000001/sig00000051 ;
  wire \blk00000001/sig00000050 ;
  wire \blk00000001/sig0000004f ;
  wire \blk00000001/sig0000004e ;
  wire \blk00000001/sig0000004d ;
  wire \blk00000001/sig0000004c ;
  wire \blk00000001/sig0000004b ;
  wire \blk00000001/sig0000004a ;
  wire \blk00000001/sig00000049 ;
  wire \blk00000001/sig00000048 ;
  wire \blk00000001/sig00000047 ;
  wire \blk00000001/sig00000046 ;
  wire \blk00000001/sig00000045 ;
  wire \blk00000001/sig00000044 ;
  wire \blk00000001/sig00000043 ;
  wire \blk00000001/sig00000042 ;
  wire \blk00000001/sig00000041 ;
  wire \blk00000001/sig00000040 ;
  wire \blk00000001/sig0000003f ;
  wire \blk00000001/sig0000003e ;
  wire \blk00000001/sig0000003d ;
  wire \blk00000001/sig0000003c ;
  wire \blk00000001/sig0000003b ;
  wire \blk00000001/sig0000003a ;
  wire \blk00000001/sig00000039 ;
  wire \blk00000001/sig00000038 ;
  wire \blk00000001/sig00000037 ;
  wire \blk00000001/sig00000036 ;
  wire \blk00000001/sig00000035 ;
  wire \blk00000001/sig00000034 ;
  wire \blk00000001/sig00000033 ;
  wire \NLW_blk00000001/blk00000016_PATTERNBDETECT_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_PATTERNDETECT_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_OVERFLOW_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_UNDERFLOW_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_CARRYCASCOUT_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_MULTSIGNOUT_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<47>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<46>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<45>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<44>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<43>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<42>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<41>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<40>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<39>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<38>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<37>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<36>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<35>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<34>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<33>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<32>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<31>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<30>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<29>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<28>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<27>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<26>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<25>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<24>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<23>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<22>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<21>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<20>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<19>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<18>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_P<17>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<29>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<28>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<27>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<26>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<25>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<24>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<23>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<22>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<21>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<20>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<19>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<18>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<17>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<16>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<15>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<14>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<13>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<12>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<11>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<10>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<9>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<8>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<7>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<6>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<5>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<4>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<3>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<2>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<1>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_ACOUT<0>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_CARRYOUT<3>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_CARRYOUT<2>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_CARRYOUT<1>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000016_CARRYOUT<0>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_PATTERNBDETECT_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_PATTERNDETECT_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_OVERFLOW_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_UNDERFLOW_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_CARRYCASCOUT_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_MULTSIGNOUT_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<47>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<46>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<45>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<44>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<43>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<42>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<41>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<40>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<39>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<38>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<37>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<36>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<35>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<34>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<33>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_P<32>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<17>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<16>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<15>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<14>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<13>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<12>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<11>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<10>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<9>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<8>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<7>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<6>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<5>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<4>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<3>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<2>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<1>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_BCOUT<0>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<29>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<28>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<27>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<26>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<25>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<24>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<23>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<22>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<21>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<20>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<19>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<18>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<17>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<16>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<15>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<14>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<13>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<12>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<11>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<10>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<9>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<8>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<7>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<6>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<5>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<4>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<3>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<2>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<1>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_ACOUT<0>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_CARRYOUT<3>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_CARRYOUT<2>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_CARRYOUT<1>_UNCONNECTED ;
  wire \NLW_blk00000001/blk00000015_CARRYOUT<0>_UNCONNECTED ;
  DSP48E #(
    .ACASCREG ( 1 ),
    .ALUMODEREG ( 0 ),
    .AREG ( 1 ),
    .AUTORESET_PATTERN_DETECT ( "FALSE" ),
    .AUTORESET_PATTERN_DETECT_OPTINV ( "MATCH" ),
    .A_INPUT ( "DIRECT" ),
    .BCASCREG ( 1 ),
    .BREG ( 1 ),
    .B_INPUT ( "DIRECT" ),
    .CARRYINREG ( 0 ),
    .CARRYINSELREG ( 0 ),
    .CREG ( 0 ),
    .PATTERN ( 48'h000000000000 ),
    .MREG ( 1 ),
    .MULTCARRYINREG ( 0 ),
    .OPMODEREG ( 0 ),
    .PREG ( 1 ),
    .SEL_MASK ( "MASK" ),
    .SEL_PATTERN ( "PATTERN" ),
    .SEL_ROUNDING_MASK ( "SEL_MASK" ),
    .SIM_MODE ( "SAFE" ),
    .USE_MULT ( "MULT_S" ),
    .USE_PATTERN_DETECT ( "NO_PATDET" ),
    .USE_SIMD ( "ONE48" ),
    .MASK ( 48'h000000000000 ))
  \blk00000001/blk00000016  (
    .CARRYIN(\blk00000001/sig000000b7 ),
    .CEA1(\blk00000001/sig000000b7 ),
    .CEA2(\blk00000001/sig00000063 ),
    .CEB1(\blk00000001/sig000000b7 ),
    .CEB2(\blk00000001/sig00000063 ),
    .CEC(\blk00000001/sig000000b7 ),
    .CECTRL(\blk00000001/sig000000b7 ),
    .CEP(\blk00000001/sig00000063 ),
    .CEM(\blk00000001/sig00000063 ),
    .CECARRYIN(\blk00000001/sig000000b7 ),
    .CEMULTCARRYIN(\blk00000001/sig000000b7 ),
    .CLK(clk),
    .RSTA(\blk00000001/sig000000b7 ),
    .RSTB(\blk00000001/sig000000b7 ),
    .RSTC(\blk00000001/sig000000b7 ),
    .RSTCTRL(\blk00000001/sig000000b7 ),
    .RSTP(\blk00000001/sig000000b7 ),
    .RSTM(\blk00000001/sig000000b7 ),
    .RSTALLCARRYIN(\blk00000001/sig000000b7 ),
    .CEALUMODE(\blk00000001/sig000000b7 ),
    .RSTALUMODE(\blk00000001/sig000000b7 ),
    .PATTERNBDETECT(\NLW_blk00000001/blk00000016_PATTERNBDETECT_UNCONNECTED ),
    .PATTERNDETECT(\NLW_blk00000001/blk00000016_PATTERNDETECT_UNCONNECTED ),
    .OVERFLOW(\NLW_blk00000001/blk00000016_OVERFLOW_UNCONNECTED ),
    .UNDERFLOW(\NLW_blk00000001/blk00000016_UNDERFLOW_UNCONNECTED ),
    .CARRYCASCIN(\blk00000001/sig000000b7 ),
    .CARRYCASCOUT(\NLW_blk00000001/blk00000016_CARRYCASCOUT_UNCONNECTED ),
    .MULTSIGNIN(\blk00000001/sig000000b7 ),
    .MULTSIGNOUT(\NLW_blk00000001/blk00000016_MULTSIGNOUT_UNCONNECTED ),
    .A({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , a[16], a[15], a[14], a[13], a[12], a[11], a[10], a[9], a[8], a[7], 
a[6], a[5], a[4], a[3], a[2], a[1], a[0]}),
    .PCIN({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .B({b[6], b[6], b[6], b[6], b[6], b[6], b[6], b[6], b[6], b[6], b[6], b[6], b[5], b[4], b[3], b[2], b[1], b[0]}),
    .C({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .CARRYINSEL({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .OPMODE({\blk00000001/sig000000b7 , \blk00000001/sig00000063 , \blk00000001/sig00000063 , \blk00000001/sig000000b7 , \blk00000001/sig00000063 , 
\blk00000001/sig000000b7 , \blk00000001/sig00000063 }),
    .BCIN({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .ALUMODE({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .PCOUT({\blk00000001/sig0000009f , \blk00000001/sig0000009e , \blk00000001/sig0000009d , \blk00000001/sig0000009c , \blk00000001/sig0000009b , 
\blk00000001/sig0000009a , \blk00000001/sig00000099 , \blk00000001/sig00000098 , \blk00000001/sig00000096 , \blk00000001/sig00000095 , 
\blk00000001/sig00000094 , \blk00000001/sig00000093 , \blk00000001/sig00000092 , \blk00000001/sig00000091 , \blk00000001/sig00000090 , 
\blk00000001/sig0000008f , \blk00000001/sig0000008e , \blk00000001/sig0000008d , \blk00000001/sig0000008b , \blk00000001/sig0000008a , 
\blk00000001/sig00000089 , \blk00000001/sig00000088 , \blk00000001/sig00000087 , \blk00000001/sig00000086 , \blk00000001/sig00000085 , 
\blk00000001/sig00000084 , \blk00000001/sig00000083 , \blk00000001/sig00000082 , \blk00000001/sig00000080 , \blk00000001/sig0000007f , 
\blk00000001/sig0000007e , \blk00000001/sig0000007d , \blk00000001/sig0000007c , \blk00000001/sig0000007b , \blk00000001/sig0000007a , 
\blk00000001/sig00000079 , \blk00000001/sig00000078 , \blk00000001/sig00000077 , \blk00000001/sig000000a5 , \blk00000001/sig000000a4 , 
\blk00000001/sig000000a3 , \blk00000001/sig000000a2 , \blk00000001/sig000000a1 , \blk00000001/sig000000a0 , \blk00000001/sig00000097 , 
\blk00000001/sig0000008c , \blk00000001/sig00000081 , \blk00000001/sig00000076 }),
    .P({\NLW_blk00000001/blk00000016_P<47>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<46>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_P<45>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<44>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<43>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_P<42>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<41>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<40>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_P<39>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<38>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<37>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_P<36>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<35>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<34>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_P<33>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<32>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<31>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_P<30>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<29>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<28>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_P<27>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<26>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<25>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_P<24>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<23>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<22>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_P<21>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<20>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<19>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_P<18>_UNCONNECTED , \NLW_blk00000001/blk00000016_P<17>_UNCONNECTED , \blk00000001/sig000000ad , \blk00000001/sig000000ac 
, \blk00000001/sig000000ab , \blk00000001/sig000000aa , \blk00000001/sig000000a9 , \blk00000001/sig000000a8 , \blk00000001/sig000000a7 , 
\blk00000001/sig000000b6 , \blk00000001/sig000000b5 , \blk00000001/sig000000b4 , \blk00000001/sig000000b3 , \blk00000001/sig000000b2 , 
\blk00000001/sig000000b1 , \blk00000001/sig000000b0 , \blk00000001/sig000000af , \blk00000001/sig000000ae , \blk00000001/sig000000a6 }),
    .BCOUT({\blk00000001/sig0000006c , \blk00000001/sig0000006b , \blk00000001/sig0000006a , \blk00000001/sig00000069 , \blk00000001/sig00000068 , 
\blk00000001/sig00000067 , \blk00000001/sig00000066 , \blk00000001/sig00000065 , \blk00000001/sig00000075 , \blk00000001/sig00000074 , 
\blk00000001/sig00000073 , \blk00000001/sig00000072 , \blk00000001/sig00000071 , \blk00000001/sig00000070 , \blk00000001/sig0000006f , 
\blk00000001/sig0000006e , \blk00000001/sig0000006d , \blk00000001/sig00000064 }),
    .ACIN({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .ACOUT({\NLW_blk00000001/blk00000016_ACOUT<29>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<28>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<27>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<26>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<25>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<24>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<23>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<22>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<21>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<20>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<19>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<18>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<17>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<16>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<15>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<14>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<13>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<12>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<11>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<10>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<9>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<8>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<7>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<6>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<5>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<4>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<3>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<2>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_ACOUT<1>_UNCONNECTED , \NLW_blk00000001/blk00000016_ACOUT<0>_UNCONNECTED }),
    .CARRYOUT({\NLW_blk00000001/blk00000016_CARRYOUT<3>_UNCONNECTED , \NLW_blk00000001/blk00000016_CARRYOUT<2>_UNCONNECTED , 
\NLW_blk00000001/blk00000016_CARRYOUT<1>_UNCONNECTED , \NLW_blk00000001/blk00000016_CARRYOUT<0>_UNCONNECTED })
  );
  DSP48E #(
    .ACASCREG ( 2 ),
    .ALUMODEREG ( 1 ),
    .AREG ( 2 ),
    .AUTORESET_PATTERN_DETECT ( "FALSE" ),
    .AUTORESET_PATTERN_DETECT_OPTINV ( "MATCH" ),
    .A_INPUT ( "DIRECT" ),
    .BCASCREG ( 1 ),
    .BREG ( 1 ),
    .B_INPUT ( "CASCADE" ),
    .CARRYINREG ( 0 ),
    .CARRYINSELREG ( 0 ),
    .CREG ( 0 ),
    .PATTERN ( 48'h000000000000 ),
    .MREG ( 1 ),
    .MULTCARRYINREG ( 0 ),
    .OPMODEREG ( 0 ),
    .PREG ( 1 ),
    .SEL_MASK ( "MASK" ),
    .SEL_PATTERN ( "PATTERN" ),
    .SEL_ROUNDING_MASK ( "SEL_MASK" ),
    .SIM_MODE ( "SAFE" ),
    .USE_MULT ( "MULT_S" ),
    .USE_PATTERN_DETECT ( "NO_PATDET" ),
    .USE_SIMD ( "ONE48" ),
    .MASK ( 48'h000000000000 ))
  \blk00000001/blk00000015  (
    .CARRYIN(\blk00000001/sig000000b7 ),
    .CEA1(\blk00000001/sig00000063 ),
    .CEA2(\blk00000001/sig00000063 ),
    .CEB1(\blk00000001/sig000000b7 ),
    .CEB2(\blk00000001/sig00000063 ),
    .CEC(\blk00000001/sig000000b7 ),
    .CECTRL(\blk00000001/sig000000b7 ),
    .CEP(\blk00000001/sig00000063 ),
    .CEM(\blk00000001/sig00000063 ),
    .CECARRYIN(\blk00000001/sig000000b7 ),
    .CEMULTCARRYIN(\blk00000001/sig000000b7 ),
    .CLK(clk),
    .RSTA(\blk00000001/sig000000b7 ),
    .RSTB(\blk00000001/sig000000b7 ),
    .RSTC(\blk00000001/sig000000b7 ),
    .RSTCTRL(\blk00000001/sig000000b7 ),
    .RSTP(\blk00000001/sig000000b7 ),
    .RSTM(\blk00000001/sig000000b7 ),
    .RSTALLCARRYIN(\blk00000001/sig000000b7 ),
    .CEALUMODE(\blk00000001/sig00000063 ),
    .RSTALUMODE(\blk00000001/sig000000b7 ),
    .PATTERNBDETECT(\NLW_blk00000001/blk00000015_PATTERNBDETECT_UNCONNECTED ),
    .PATTERNDETECT(\NLW_blk00000001/blk00000015_PATTERNDETECT_UNCONNECTED ),
    .OVERFLOW(\NLW_blk00000001/blk00000015_OVERFLOW_UNCONNECTED ),
    .UNDERFLOW(\NLW_blk00000001/blk00000015_UNDERFLOW_UNCONNECTED ),
    .CARRYCASCIN(\blk00000001/sig000000b7 ),
    .CARRYCASCOUT(\NLW_blk00000001/blk00000015_CARRYCASCOUT_UNCONNECTED ),
    .MULTSIGNIN(\blk00000001/sig000000b7 ),
    .MULTSIGNOUT(\NLW_blk00000001/blk00000015_MULTSIGNOUT_UNCONNECTED ),
    .A({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , a[41], 
a[40], a[39], a[38], a[37], a[36], a[35], a[34], a[33], a[32], a[31], a[30], a[29], a[28], a[27], a[26], a[25], a[24], a[23], a[22], a[21], a[20], 
a[19], a[18], a[17]}),
    .PCIN({\blk00000001/sig0000009f , \blk00000001/sig0000009e , \blk00000001/sig0000009d , \blk00000001/sig0000009c , \blk00000001/sig0000009b , 
\blk00000001/sig0000009a , \blk00000001/sig00000099 , \blk00000001/sig00000098 , \blk00000001/sig00000096 , \blk00000001/sig00000095 , 
\blk00000001/sig00000094 , \blk00000001/sig00000093 , \blk00000001/sig00000092 , \blk00000001/sig00000091 , \blk00000001/sig00000090 , 
\blk00000001/sig0000008f , \blk00000001/sig0000008e , \blk00000001/sig0000008d , \blk00000001/sig0000008b , \blk00000001/sig0000008a , 
\blk00000001/sig00000089 , \blk00000001/sig00000088 , \blk00000001/sig00000087 , \blk00000001/sig00000086 , \blk00000001/sig00000085 , 
\blk00000001/sig00000084 , \blk00000001/sig00000083 , \blk00000001/sig00000082 , \blk00000001/sig00000080 , \blk00000001/sig0000007f , 
\blk00000001/sig0000007e , \blk00000001/sig0000007d , \blk00000001/sig0000007c , \blk00000001/sig0000007b , \blk00000001/sig0000007a , 
\blk00000001/sig00000079 , \blk00000001/sig00000078 , \blk00000001/sig00000077 , \blk00000001/sig000000a5 , \blk00000001/sig000000a4 , 
\blk00000001/sig000000a3 , \blk00000001/sig000000a2 , \blk00000001/sig000000a1 , \blk00000001/sig000000a0 , \blk00000001/sig00000097 , 
\blk00000001/sig0000008c , \blk00000001/sig00000081 , \blk00000001/sig00000076 }),
    .B({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .C({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .CARRYINSEL({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .OPMODE({\blk00000001/sig00000063 , \blk00000001/sig000000b7 , \blk00000001/sig00000063 , \blk00000001/sig000000b7 , \blk00000001/sig00000063 , 
\blk00000001/sig000000b7 , \blk00000001/sig00000063 }),
    .BCIN({\blk00000001/sig0000006c , \blk00000001/sig0000006b , \blk00000001/sig0000006a , \blk00000001/sig00000069 , \blk00000001/sig00000068 , 
\blk00000001/sig00000067 , \blk00000001/sig00000066 , \blk00000001/sig00000065 , \blk00000001/sig00000075 , \blk00000001/sig00000074 , 
\blk00000001/sig00000073 , \blk00000001/sig00000072 , \blk00000001/sig00000071 , \blk00000001/sig00000070 , \blk00000001/sig0000006f , 
\blk00000001/sig0000006e , \blk00000001/sig0000006d , \blk00000001/sig00000064 }),
    .ALUMODE({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .PCOUT({\blk00000001/sig0000005c , \blk00000001/sig0000005b , \blk00000001/sig0000005a , \blk00000001/sig00000059 , \blk00000001/sig00000058 , 
\blk00000001/sig00000057 , \blk00000001/sig00000056 , \blk00000001/sig00000055 , \blk00000001/sig00000053 , \blk00000001/sig00000052 , 
\blk00000001/sig00000051 , \blk00000001/sig00000050 , \blk00000001/sig0000004f , \blk00000001/sig0000004e , \blk00000001/sig0000004d , 
\blk00000001/sig0000004c , \blk00000001/sig0000004b , \blk00000001/sig0000004a , \blk00000001/sig00000048 , \blk00000001/sig00000047 , 
\blk00000001/sig00000046 , \blk00000001/sig00000045 , \blk00000001/sig00000044 , \blk00000001/sig00000043 , \blk00000001/sig00000042 , 
\blk00000001/sig00000041 , \blk00000001/sig00000040 , \blk00000001/sig0000003f , \blk00000001/sig0000003d , \blk00000001/sig0000003c , 
\blk00000001/sig0000003b , \blk00000001/sig0000003a , \blk00000001/sig00000039 , \blk00000001/sig00000038 , \blk00000001/sig00000037 , 
\blk00000001/sig00000036 , \blk00000001/sig00000035 , \blk00000001/sig00000034 , \blk00000001/sig00000062 , \blk00000001/sig00000061 , 
\blk00000001/sig00000060 , \blk00000001/sig0000005f , \blk00000001/sig0000005e , \blk00000001/sig0000005d , \blk00000001/sig00000054 , 
\blk00000001/sig00000049 , \blk00000001/sig0000003e , \blk00000001/sig00000033 }),
    .P({\NLW_blk00000001/blk00000015_P<47>_UNCONNECTED , \NLW_blk00000001/blk00000015_P<46>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_P<45>_UNCONNECTED , \NLW_blk00000001/blk00000015_P<44>_UNCONNECTED , \NLW_blk00000001/blk00000015_P<43>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_P<42>_UNCONNECTED , \NLW_blk00000001/blk00000015_P<41>_UNCONNECTED , \NLW_blk00000001/blk00000015_P<40>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_P<39>_UNCONNECTED , \NLW_blk00000001/blk00000015_P<38>_UNCONNECTED , \NLW_blk00000001/blk00000015_P<37>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_P<36>_UNCONNECTED , \NLW_blk00000001/blk00000015_P<35>_UNCONNECTED , \NLW_blk00000001/blk00000015_P<34>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_P<33>_UNCONNECTED , \NLW_blk00000001/blk00000015_P<32>_UNCONNECTED , p[48], p[47], p[46], p[45], p[44], p[43], p[42], 
p[41], p[40], p[39], p[38], p[37], p[36], p[35], p[34], p[33], p[32], p[31], p[30], p[29], p[28], p[27], p[26], p[25], p[24], p[23], p[22], p[21], 
p[20], p[19], p[18], p[17]}),
    .BCOUT({\NLW_blk00000001/blk00000015_BCOUT<17>_UNCONNECTED , \NLW_blk00000001/blk00000015_BCOUT<16>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_BCOUT<15>_UNCONNECTED , \NLW_blk00000001/blk00000015_BCOUT<14>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_BCOUT<13>_UNCONNECTED , \NLW_blk00000001/blk00000015_BCOUT<12>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_BCOUT<11>_UNCONNECTED , \NLW_blk00000001/blk00000015_BCOUT<10>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_BCOUT<9>_UNCONNECTED , \NLW_blk00000001/blk00000015_BCOUT<8>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_BCOUT<7>_UNCONNECTED , \NLW_blk00000001/blk00000015_BCOUT<6>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_BCOUT<5>_UNCONNECTED , \NLW_blk00000001/blk00000015_BCOUT<4>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_BCOUT<3>_UNCONNECTED , \NLW_blk00000001/blk00000015_BCOUT<2>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_BCOUT<1>_UNCONNECTED , \NLW_blk00000001/blk00000015_BCOUT<0>_UNCONNECTED }),
    .ACIN({\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , 
\blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 , \blk00000001/sig000000b7 }),
    .ACOUT({\NLW_blk00000001/blk00000015_ACOUT<29>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<28>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<27>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<26>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<25>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<24>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<23>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<22>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<21>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<20>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<19>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<18>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<17>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<16>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<15>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<14>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<13>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<12>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<11>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<10>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<9>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<8>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<7>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<6>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<5>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<4>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<3>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<2>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_ACOUT<1>_UNCONNECTED , \NLW_blk00000001/blk00000015_ACOUT<0>_UNCONNECTED }),
    .CARRYOUT({\NLW_blk00000001/blk00000015_CARRYOUT<3>_UNCONNECTED , \NLW_blk00000001/blk00000015_CARRYOUT<2>_UNCONNECTED , 
\NLW_blk00000001/blk00000015_CARRYOUT<1>_UNCONNECTED , \NLW_blk00000001/blk00000015_CARRYOUT<0>_UNCONNECTED })
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000014  (
    .C(clk),
    .D(\blk00000001/sig000000ad ),
    .Q(p[16])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000013  (
    .C(clk),
    .D(\blk00000001/sig000000ac ),
    .Q(p[15])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000012  (
    .C(clk),
    .D(\blk00000001/sig000000ab ),
    .Q(p[14])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000011  (
    .C(clk),
    .D(\blk00000001/sig000000aa ),
    .Q(p[13])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000010  (
    .C(clk),
    .D(\blk00000001/sig000000a9 ),
    .Q(p[12])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk0000000f  (
    .C(clk),
    .D(\blk00000001/sig000000a8 ),
    .Q(p[11])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk0000000e  (
    .C(clk),
    .D(\blk00000001/sig000000a7 ),
    .Q(p[10])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk0000000d  (
    .C(clk),
    .D(\blk00000001/sig000000b6 ),
    .Q(p[9])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk0000000c  (
    .C(clk),
    .D(\blk00000001/sig000000b5 ),
    .Q(p[8])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk0000000b  (
    .C(clk),
    .D(\blk00000001/sig000000b4 ),
    .Q(p[7])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk0000000a  (
    .C(clk),
    .D(\blk00000001/sig000000b3 ),
    .Q(p[6])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000009  (
    .C(clk),
    .D(\blk00000001/sig000000b2 ),
    .Q(p[5])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000008  (
    .C(clk),
    .D(\blk00000001/sig000000b1 ),
    .Q(p[4])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000007  (
    .C(clk),
    .D(\blk00000001/sig000000b0 ),
    .Q(p[3])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000006  (
    .C(clk),
    .D(\blk00000001/sig000000af ),
    .Q(p[2])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000005  (
    .C(clk),
    .D(\blk00000001/sig000000ae ),
    .Q(p[1])
  );
  FD #(
    .INIT ( 1'b0 ))
  \blk00000001/blk00000004  (
    .C(clk),
    .D(\blk00000001/sig000000a6 ),
    .Q(p[0])
  );
  VCC   \blk00000001/blk00000003  (
    .P(\blk00000001/sig00000063 )
  );
  GND   \blk00000001/blk00000002  (
    .G(\blk00000001/sig000000b7 )
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
